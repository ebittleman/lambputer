""" rom that contains micro-code """

OPS = {
    0x00: 0x4004,
    0x01: 0x1408,
    0x02: 0x8000,

    # LDA
    0x10: 0x4004,
    0x11: 0x1408,
    0x12: 0x4800,
    0x13: 0x1200,
    0x14: 0x0000,

    # ADD
    0x20: 0x4004,
    0x21: 0x1408,
    0x22: 0x4800,
    0x23: 0x1020,
    0x24: 0x0280,

    0x30: 0x4004,
    0x31: 0x1408,
    0x32: 0x8000,

    0x40: 0x4004,
    0x41: 0x1408,
    0x42: 0x8000,

    0x50: 0x4004,
    0x51: 0x1408,
    0x52: 0x8000,

    0x60: 0x4004,
    0x61: 0x1408,
    0x62: 0x8000,

    0x70: 0x4004,
    0x71: 0x1408,
    0x72: 0x8000,

    0x80: 0x4004,
    0x81: 0x1408,
    0x82: 0x8000,

    0x90: 0x4004,
    0x91: 0x1408,
    0x92: 0x8000,

    0xa0: 0x4004,
    0xa1: 0x1408,
    0xa2: 0x8000,

    0xb0: 0x4004,
    0xb1: 0x1408,
    0xb2: 0x8000,

    0xc0: 0x4004,
    0xc1: 0x1408,
    0xc2: 0x8000,

    0xd0: 0x4004,
    0xd1: 0x1408,
    0xd2: 0x8000,

    # Output
    0xe0: 0x4004,
    0xe1: 0x1408,
    0xe2: 0x0110,
    0xe3: 0x8000,
    0xe4: 0x0000,

    0xf0: 0x4004,
    0xf1: 0x1408,
    0xf2: 0x8000,
}

def program_rom(data, size):
    rom = list([0] * size)
    for i, val in data.items():
        rom[i] = val

    return rom

ROM = program_rom(OPS, 256)

def lambda_handler(event, _):
    op = int(event['op'], 0)
    ic_count = int(event['ic_count'], 0)

    upper_word = op >> 64 - 12
    index = upper_word | ic_count
    return {
        'op': event['op'],
        'ic_count': event['ic_count'],
        'upper_word': hex(upper_word),
        'index': hex(index),
        'control': to_control_state(ROM[index]),
    }


def to_control_state(inst):
    word = inst.to_bytes(2, 'big')
    return {
        "halt": bool(word[0] & 0x80),
        "addrin": bool(word[0] & 0x40),
        "min": bool(word[0] & 0x20),
        "mout": bool(word[0] & 0x10),
        "irout": bool(word[0] & 0x08),
        "irin": bool(word[0] & 0x04),
        "ain": bool(word[0] & 0x02),
        "aout": bool(word[0] & 0x01),
        "eo": bool(word[1] & 0x80),
        "subtract": bool(word[1] & 0x40),
        "bin": bool(word[1] & 0x20),
        "outin": bool(word[1] & 0x10),
        "count_enable": bool(word[1] & 0x08),
        "counter_out": bool(word[1] & 0x04),
        "jump": bool(word[1] & 0x02)
    }
